{"ast":null,"code":"var _jsxFileName = \"/home/student/fibo/react-fibonacci-calculator/src/components/NaturalNumberInput/NaturalNumberInput.js\";\n\n/* global BigInt */\nimport React from \"react\";\nimport { stringIsNaturalNumber } from \"utils/string-utils\";\nimport \"./NaturalNumberInput.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function IntegerInput(props) {\n  function processInput(event) {\n    const value = event.target.value; // in case the value is an empty string\n    // set it and do nothing\n\n    if (value === \"\") {\n      props.setValue(value);\n      props.setResult(undefined);\n      return;\n    }\n\n    if (!stringIsNaturalNumber(value)) return;\n    const integer = BigInt(value); // we use BigInt to prevent precision errors\n\n    props.setValue(integer);\n    props.setResult(undefined);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"input\", {\n    className: \"natural-integer-input\",\n    value: props.value.toLocaleString(\"fullwide\", {\n      useGrouping: false\n    }) // fullwide to prevent scientific notation\n    ,\n    onChange: processInput,\n    \"aria-label\": \"integer-input\",\n    placeholder: \"Specify a natural number\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 23,\n    columnNumber: 5\n  }, this);\n}\n_c = IntegerInput;\n\nvar _c;\n\n$RefreshReg$(_c, \"IntegerInput\");","map":{"version":3,"sources":["/home/student/fibo/react-fibonacci-calculator/src/components/NaturalNumberInput/NaturalNumberInput.js"],"names":["React","stringIsNaturalNumber","IntegerInput","props","processInput","event","value","target","setValue","setResult","undefined","integer","BigInt","toLocaleString","useGrouping"],"mappings":";;AAAA;AACA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,qBAAT,QAAsC,oBAAtC;AACA,OAAO,0BAAP;;AAEA,eAAe,SAASC,YAAT,CAAsBC,KAAtB,EAA6B;AAC1C,WAASC,YAAT,CAAsBC,KAAtB,EAA6B;AAC3B,UAAMC,KAAK,GAAGD,KAAK,CAACE,MAAN,CAAaD,KAA3B,CAD2B,CAE3B;AACA;;AACA,QAAIA,KAAK,KAAK,EAAd,EAAkB;AAChBH,MAAAA,KAAK,CAACK,QAAN,CAAeF,KAAf;AACAH,MAAAA,KAAK,CAACM,SAAN,CAAgBC,SAAhB;AACA;AACD;;AACD,QAAI,CAACT,qBAAqB,CAACK,KAAD,CAA1B,EAAmC;AACnC,UAAMK,OAAO,GAAGC,MAAM,CAACN,KAAD,CAAtB,CAV2B,CAUI;;AAC/BH,IAAAA,KAAK,CAACK,QAAN,CAAeG,OAAf;AACAR,IAAAA,KAAK,CAACM,SAAN,CAAgBC,SAAhB;AACD;;AAED,sBACE;AACE,IAAA,SAAS,EAAC,uBADZ;AAEE,IAAA,KAAK,EAAEP,KAAK,CAACG,KAAN,CAAYO,cAAZ,CAA2B,UAA3B,EAAuC;AAAEC,MAAAA,WAAW,EAAE;AAAf,KAAvC,CAFT,CAEyE;AAFzE;AAGE,IAAA,QAAQ,EAAEV,YAHZ;AAIE,kBAAW,eAJb;AAKE,IAAA,WAAW,EAAC;AALd;AAAA;AAAA;AAAA;AAAA,UADF;AASD;KAzBuBF,Y","sourcesContent":["/* global BigInt */\nimport React from \"react\";\nimport { stringIsNaturalNumber } from \"utils/string-utils\";\nimport \"./NaturalNumberInput.css\";\n\nexport default function IntegerInput(props) {\n  function processInput(event) {\n    const value = event.target.value;\n    // in case the value is an empty string\n    // set it and do nothing\n    if (value === \"\") {\n      props.setValue(value);\n      props.setResult(undefined);\n      return;\n    }\n    if (!stringIsNaturalNumber(value)) return;\n    const integer = BigInt(value); // we use BigInt to prevent precision errors\n    props.setValue(integer);\n    props.setResult(undefined);\n  }\n\n  return (\n    <input\n      className=\"natural-integer-input\"\n      value={props.value.toLocaleString(\"fullwide\", { useGrouping: false })} // fullwide to prevent scientific notation\n      onChange={processInput}\n      aria-label=\"integer-input\"\n      placeholder=\"Specify a natural number\"\n    ></input>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}