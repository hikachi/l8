{"version":3,"sources":["components/NaturalNumberInput/NaturalNumberInput.js","utils/string-utils.js","components/CalculationResult/CalculationResult.js","utils/fibonacci.js","components/App/App.js","index.js"],"names":["IntegerInput","props","className","value","toLocaleString","useGrouping","onChange","event","target","setValue","setResult","undefined","test","integer","BigInt","aria-label","placeholder","CLASS_NAME","CalculationResult","isLoading","result","initialCache","fibonacciCache","Fibonacci","naturalNumber","i","length","calc","FibonacciIterativeMemoized","current","N","lastValue","penultimateValue","FibonacciIterative","App","useState","inputValue","setInputValue","setIsLoading","useEffect","onClick","e","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"sRAKe,SAASA,EAAaC,GAgBnC,OACE,uBACEC,UAAU,wBACVC,MAAOF,EAAME,MAAMC,eAAe,WAAY,CAAEC,aAAa,IAC7DC,SAnBJ,SAAsBC,GACpB,IAAMJ,EAAQI,EAAMC,OAAOL,MAG3B,GAAc,KAAVA,EAGF,OAFAF,EAAMQ,SAASN,QACfF,EAAMS,eAAUC,GAGlB,GCZK,iBAAiBC,KDYKT,GAA3B,CCfG,IDgBGU,EAAUC,OAAOX,GACvBF,EAAMQ,SAASI,GACfZ,EAAMS,eAAUC,KAQdI,aAAW,gBACXC,YAAY,6B,UExBLC,EAAa,mBACX,SAASC,EAAkBjB,GACxC,OAAIA,EAAMkB,UAEN,qBAAKjB,UAAWe,EAAhB,SACE,qBAAKf,UAAU,kBAKAS,IAAjBV,EAAMmB,OACD,qBAAKlB,UAAW,aAAee,IAItC,qBAAKf,UAAW,OAASe,EAAzB,SACE,qBAAIf,UAAU,UAAd,qBAAiCD,EAAMmB,OAAOhB,sBCd7C,IAEMiB,EAAe,CAACP,OAAO,GAAIA,OAAO,GAAIA,OAAO,IAE/CQ,EAAc,UAAOD,GAiDzB,SAASE,EAAUC,GAExB,OAAIA,EAvD8C,IAsB7C,SAAoCA,GAEzC,QAAwCb,IAAlCW,EAAeE,GACnB,OAAOF,EAAeE,GAGxB,IADA,IACSC,EADCH,EAAeI,OACTD,GAAKD,EAAeC,IAAK,CACvC,IAAME,EAAOL,EAAeG,EAAI,GAAKH,EAAeG,EAAI,GACxDH,EAAeG,GAAKE,EAEtB,OAAOL,EAAeE,GAwBbI,CAA2BJ,GAtB/B,SAA4BA,GAEjC,QAAwCb,IAAlCW,EAAeE,GACnB,OAAOF,EAAeE,GAMxB,IAJA,IAGIK,EAHEC,EAAIR,EAAeI,OACrBK,EAAYT,EAAeQ,EAAI,GAC/BE,EAAmBV,EAAeQ,EAAI,GAEjCL,EAAIK,EAAGL,GAAKD,EAAeC,IAClCI,EAAUE,EAAYC,EACtBA,EAAmBD,EACnBA,EAAYF,EAGd,OAAOA,EAWAI,CAAmBT,GC3Db,SAASU,IACtB,MAAoCC,mBAAS,IAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KACA,EAA4BF,wBAASxB,GAArC,mBAAOS,EAAP,KAAeV,EAAf,KACA,EAAkCyB,oBAAS,GAA3C,mBAAOhB,EAAP,KAAkBmB,EAAlB,KAWA,OATAC,qBAAU,WACHpB,GAA4B,KAAfiB,IAEhB1B,EAAUa,EAAUa,IACpBE,GAAa,MAGd,CAACnB,EAAWiB,IAGb,qBAAKlC,UAAU,iBAAf,SACE,qBAAKA,UAAU,uBAAf,SACE,sBAAKA,UAAU,mCAAf,UACE,sDACA,cAAC,EAAD,CACEC,MAAOiC,EACP3B,SAAU4B,EACV3B,UAAWA,IAEb,wBACER,UAAU,6BACVsC,QAAS,SAACC,GACW,KAAfL,GAAmBE,GAAa,IAHxC,iCAQA,cAAC,EAAD,CAAmBlB,OAAQA,EAAQD,UAAWA,WCjCxDuB,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.11617ae1.chunk.js","sourcesContent":["/* global BigInt */\nimport React from \"react\";\nimport { stringIsNaturalNumber } from \"utils/string-utils\";\nimport \"./NaturalNumberInput.css\";\n\nexport default function IntegerInput(props) {\n  function processInput(event) {\n    const value = event.target.value;\n    // in case the value is an empty string\n    // set it and do nothing\n    if (value === \"\") {\n      props.setValue(value);\n      props.setResult(undefined);\n      return;\n    }\n    if (!stringIsNaturalNumber(value)) return;\n    const integer = BigInt(value); // we use BigInt to prevent precision errors\n    props.setValue(integer);\n    props.setResult(undefined);\n  }\n\n  return (\n    <input\n      className=\"natural-integer-input\"\n      value={props.value.toLocaleString(\"fullwide\", { useGrouping: false })} // fullwide to prevent scientific notation\n      onChange={processInput}\n      aria-label=\"integer-input\"\n      placeholder=\"Specify a natural number\"\n    ></input>\n  );\n}\n","export function stringIsNaturalNumber(string) {\n  // regex to match positive integer numbers\n  //  start - 0 or 1-9 - [0,9] {0,} - end\n  return /^(0|[1-9]\\d*)$/.test(string);\n}\n","import React from \"react\";\nimport \"./CalculationResult.css\";\n\nexport const CLASS_NAME = \"result-container\";\nexport default function CalculationResult(props) {\n  if (props.isLoading) {\n    return (\n      <div className={CLASS_NAME}>\n        <div className=\"loader\" />\n      </div>\n    );\n  }\n\n  if (props.result === undefined) {\n    return <div className={\"empty-div \" + CLASS_NAME} />;\n  }\n\n  return (\n    <div className={\"row \" + CLASS_NAME}>\n      <h3 className=\"content\">Result: {props.result.toLocaleString()}</h3>\n    </div>\n  );\n}\n","// We need to enable JavaScript Built-in BigInt\n/* global BigInt */\n\n// this number can be tweaked to achieve more efficient calculations\n// but should be carefully selected to prevent filling JS maximum heap size\nexport const MAXIMUM_ARRAY_LENGTH_FOR_MEMOIZATION = 10_000;\n// we use BigInt for bigger precision\nexport const initialCache = [BigInt(0), BigInt(1), BigInt(1)];\n// we make a copy to prevent modifying the original cache\nexport let fibonacciCache = [...initialCache];\n\nexport function cleanFibonacciCache() {\n  fibonacciCache = [...initialCache];\n}\n\n//export function FibonacciRecursive(naturalNumber) {\n//  // memoized version of Fibonacci succession\n//  // for big numbers fails because stack size is exceeded\n//  if (fibonacciCache[naturalNumber]) {\n//    return fibonacciCache[naturalNumber];\n//  }\n//  fibonacciCache[naturalNumber] =\n//    FibonacciRecursive(naturalNumber - 1) +\n//    FibonacciRecursive(naturalNumber - 2);\n//  return fibonacciCache[naturalNumber];\n//}\n\nexport function FibonacciIterativeMemoized(naturalNumber) {\n  // iterative version of Fibonacci with memoization\n  if (!(fibonacciCache[naturalNumber] === undefined)) {\n    return fibonacciCache[naturalNumber];\n  }\n  const N = fibonacciCache.length;\n  for (let i = N; i <= naturalNumber; i++) {\n    const calc = fibonacciCache[i - 1] + fibonacciCache[i - 2];\n    fibonacciCache[i] = calc;\n  }\n  return fibonacciCache[naturalNumber];\n}\nexport function FibonacciIterative(naturalNumber) {\n  // iterative version of Fibonacci using already done calculations\n  if (!(fibonacciCache[naturalNumber] === undefined)) {\n    return fibonacciCache[naturalNumber];\n  }\n  const N = fibonacciCache.length;\n  let lastValue = fibonacciCache[N - 1];\n  let penultimateValue = fibonacciCache[N - 2];\n  let current;\n  for (let i = N; i <= naturalNumber; i++) {\n    current = lastValue + penultimateValue;\n    penultimateValue = lastValue;\n    lastValue = current;\n  }\n\n  return current;\n}\n\n// wrapper for selecting Fibonacci method\nexport function Fibonacci(naturalNumber) {\n  // in case the natural number is small we can use memoized version\n  if (naturalNumber < MAXIMUM_ARRAY_LENGTH_FOR_MEMOIZATION) {\n    return FibonacciIterativeMemoized(naturalNumber);\n  }\n  // if the natural number is big we should use the pure iterative version\n  // to prevent filling up the maximum JS Heap Size\n  return FibonacciIterative(naturalNumber);\n}\n","import \"./App.css\";\nimport NaturalNumberInput from \"components/NaturalNumberInput/NaturalNumberInput\";\nimport CalculationResult from \"components/CalculationResult/CalculationResult\";\nimport { useState, useEffect } from \"react\";\nimport { Fibonacci } from \"utils/fibonacci\";\n\nexport default function App() {\n  const [inputValue, setInputValue] = useState(\"\");\n  const [result, setResult] = useState(undefined);\n  const [isLoading, setIsLoading] = useState(false);\n\n  useEffect(() => {\n    if (!isLoading || inputValue === \"\") return;\n    function handleCalculateButtonClick() {\n      setResult(Fibonacci(inputValue));\n      setIsLoading(false);\n    }\n    handleCalculateButtonClick();\n  }, [isLoading, inputValue]);\n\n  return (\n    <div className=\"App-background\">\n      <div className=\"App-container column\">\n        <div className=\"column horizontal-center content\">\n          <h1>Fibonacci Calculator</h1>\n          <NaturalNumberInput\n            value={inputValue}\n            setValue={setInputValue}\n            setResult={setResult}\n          />\n          <button\n            className=\"calculate-fibonacci-button\"\n            onClick={(e) => {\n              if (inputValue !== \"\") setIsLoading(true);\n            }}\n          >\n            Calculate Fibonacci\n          </button>\n          <CalculationResult result={result} isLoading={isLoading} />\n        </div>\n      </div>\n    </div>\n  );\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"components/App/App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}